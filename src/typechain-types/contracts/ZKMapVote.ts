/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ZKMapVoteInterface extends utils.Interface {
  functions: {
    "getInfoVotation(uint256)": FunctionFragment;
    "getOneOptions(uint256)": FunctionFragment;
    "getOneTitle(uint256)": FunctionFragment;
    "getOneVoti(uint256)": FunctionFragment;
    "getVotation(uint256)": FunctionFragment;
    "newVotation(uint32,address,address,string,uint256,string[10])": FunctionFragment;
    "registerOneCommitment(uint256,uint256,uint256,address)": FunctionFragment;
    "registerOneValidator(uint256,address)": FunctionFragment;
    "registerOneWhitelist(uint256,address)": FunctionFragment;
    "voteOne(uint256,uint256,uint256,uint256,uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getInfoVotation"
      | "getOneOptions"
      | "getOneTitle"
      | "getOneVoti"
      | "getVotation"
      | "newVotation"
      | "registerOneCommitment"
      | "registerOneValidator"
      | "registerOneWhitelist"
      | "voteOne"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getInfoVotation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOneOptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOneTitle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOneVoti",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "newVotation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOneCommitment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOneValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOneWhitelist",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOne",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInfoVotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOneVoti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newVotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOneCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOneValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOneWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteOne", data: BytesLike): Result;

  events: {};
}

export interface ZKMapVote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZKMapVoteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getInfoVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string]>;

    getOneOptions(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOneTitle(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOneVoti(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newVotation(
      _levels: PromiseOrValue<BigNumberish>,
      _hasher: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _numOption: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerOneCommitment(
      _idVoto: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerOneValidator(
      _idVoto: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerOneWhitelist(
      _idVoto: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteOne(
      _idVoto: PromiseOrValue<BigNumberish>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getInfoVotation(
    _idVoto: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], string]>;

  getOneOptions(
    _idVoto: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOneTitle(
    _idVoto: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOneVoti(
    _idVoto: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVotation(
    _idVoto: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  newVotation(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    _numOption: PromiseOrValue<BigNumberish>,
    _options: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerOneCommitment(
    _idVoto: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BigNumberish>,
    _commitment: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerOneValidator(
    _idVoto: PromiseOrValue<BigNumberish>,
    _validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerOneWhitelist(
    _idVoto: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteOne(
    _idVoto: PromiseOrValue<BigNumberish>,
    _nullifier: PromiseOrValue<BigNumberish>,
    _root: PromiseOrValue<BigNumberish>,
    _option: PromiseOrValue<BigNumberish>,
    _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _proof_b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ],
    _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInfoVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string]>;

    getOneOptions(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOneTitle(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOneVoti(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    newVotation(
      _levels: PromiseOrValue<BigNumberish>,
      _hasher: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _numOption: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerOneCommitment(
      _idVoto: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerOneValidator(
      _idVoto: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerOneWhitelist(
      _idVoto: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteOne(
      _idVoto: PromiseOrValue<BigNumberish>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getInfoVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneOptions(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneTitle(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneVoti(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newVotation(
      _levels: PromiseOrValue<BigNumberish>,
      _hasher: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _numOption: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerOneCommitment(
      _idVoto: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerOneValidator(
      _idVoto: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerOneWhitelist(
      _idVoto: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteOne(
      _idVoto: PromiseOrValue<BigNumberish>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInfoVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneOptions(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneTitle(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneVoti(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotation(
      _idVoto: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVotation(
      _levels: PromiseOrValue<BigNumberish>,
      _hasher: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _numOption: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerOneCommitment(
      _idVoto: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerOneValidator(
      _idVoto: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerOneWhitelist(
      _idVoto: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteOne(
      _idVoto: PromiseOrValue<BigNumberish>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
